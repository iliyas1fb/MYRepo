
package org.portal.app.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.business.service.UserService;
import org.common.service.LoginLogout;
import org.common.service.Permission;
import org.common.service.User;
import org.exception.service.PortalServiceException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.support.SessionStatus;
import org.springframework.web.servlet.ModelAndView;


/**
 * The Class LoginLogoutController handles all the functionalities for Login Logout.
 */
@Controller
@RequestMapping("/access")
public class LoginLogoutController {

	/** The LOGGER. */
	//private static final  Log4jAdapter LOGGER = Log4jAdapter.getInstance();

	/** The CLAS s_ name. */
	private final String className = this.getClass().getName();
	
	
	@Autowired
	private UserService userService;
	

	/**
	 * Gets the login page.
	 *
	 * @param error the error
	 * @param model the model
	 * @return the login page
	 */
	@RequestMapping(value = "/login", method = RequestMethod.GET)
	public String getLoginPage(@ModelAttribute("loginLogout") LoginLogout loginLogout,
			@RequestParam(value = "error", required = false) boolean error, ModelMap model) {

		String methodName = "getLoginPage";
		StringBuilder sb = new StringBuilder();
		sb.append("userName=").append("Not Logged In").append(",");
		//LOGGER.debug(className, methodName, sb.toString().concat(OMNYPAYConstants.LOG_ENTRY));
		//LOGGER.debug(className, methodName, sb.toString().concat(OMNYPAYConstants.LOG_EXIT));
		return "login";
	}
	

	
	
	
	
	
	
	
	/**
	 * Process submit.
	 * 
	 * @param forgotPasswordVO
	 *            the forgot password vo
	 * @param result
	 *            the result
	 * @param status
	 *            the status
	 * @return the string
	 */
	@RequestMapping(value = "/loginSubmit", method = RequestMethod.POST)
	public String processSubmit(@ModelAttribute("loginLogout") LoginLogout loginLogout, BindingResult result, SessionStatus status,
			HttpServletRequest req, HttpServletResponse resp) {
		
			HttpSession session = req.getSession(true);
		
			User secUserVO ;
			Map<String,String> menuList = new HashMap<String,String>();
		
			try {
				secUserVO = userService.getUserInfo(loginLogout.getUserName());
				
				if (secUserVO == null) {
					//throw new UsernameNotFoundException(MessageUtil.getMessage("error.invalid.User", locale));
				}
				secUserVO.setOriginalLoginName(secUserVO.getLoginName());
				
				List<Permission> permVOList = userService.getPermissionVOList(secUserVO.getLoginName());
				
				if(permVOList!= null){
					secUserVO.setPermVOList(permVOList);
					for(Permission obj :permVOList)	{
						menuList.put(obj.getPermissionDesc(),obj.getPermissionName());
					}
				}
				session.setAttribute("permVOList", permVOList);
				session.setAttribute("menuList", menuList);
				session.setAttribute("secUserVO", secUserVO);
				//session.setAttribute("subuser", secUserVO.getSubRoleName());
				//grantedAuthorities = getGrantedAuthority(secUserVO);
				
				
				
				
				
			} catch (PortalServiceException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		
			
		
			/*}catch (Exception e) {
				//logger.error("User does not exist!",e);
				//throw new BadCredentialsException(MessageUtil.getMessage("error.UserNotExist", locale));
			}*/
		
/*		if (secUserVO != null) {
			if ("T".equals(secUserVO.getAccountExpired())) {
				//throw new BadCredentialsException(MessageUtil.getMessage("error.account.Expired", locale));
			}
			if ("T".equals(secUserVO.getAccountLocked())) {
				//throw new LockedException(MessageUtil.getMessage("error.account.Locked", locale));
			}
			if ("T".equals(secUserVO.getCredentialsExpired())) {
				//throw new BadCredentialsException(MessageUtil.getMessage("error.password.Expired", locale));
			}
		}*/
			
			
		
			return "SystemAdminDashBoard";
	}
	
	
	
	@RequestMapping(value = "/logout", method = RequestMethod.GET)
	public String getLogoutPage(HttpServletRequest req, HttpServletResponse resp) {

		String methodName = "getDeniedPage";
		
		HttpSession session = req.getSession(false);
		
		session.setAttribute("permVOList", null);
		session.setAttribute("menuList", null);
		session.setAttribute("secUserVO", null);
		
		
		
	//	LogDetails logDetails = LogDetails.getInstance();
		//StringBuilder sb = new StringBuilder();
		//sb.append("userName=").append(logDetails.getUserName()).append(OMNYPAYConstants.COMMA);
	//	LOGGER.debug(className, methodName, sb.toString().concat(OMNYPAYConstants.LOG_ENTRY));

		//LOGGER.debug(className, methodName, sb.toString().concat(OMNYPAYConstants.LOG_EXIT));
//
		return "login";
	}
	
	
	
	

	/**
	 * Gets the denied page.
	 *
	 * @return the denied page
	 */
	@RequestMapping(value = "/denied", method = RequestMethod.GET)
	public String getDeniedPage() {

		String methodName = "getDeniedPage";
	//	LogDetails logDetails = LogDetails.getInstance();
		//StringBuilder sb = new StringBuilder();
		//sb.append("userName=").append(logDetails.getUserName()).append(OMNYPAYConstants.COMMA);
	//	LOGGER.debug(className, methodName, sb.toString().concat(OMNYPAYConstants.LOG_ENTRY));

		//LOGGER.debug(className, methodName, sb.toString().concat(OMNYPAYConstants.LOG_EXIT));
//
		return "deniedpage";
	}

	/**
	 * Gets the timeout page.
	 * @param error the error
	 * @param model the model
	 * @return the timeout page
	 */
	@RequestMapping(value = "/timeout", method = RequestMethod.GET)
	public String getTimeoutPage(@RequestParam(value = "error", required = false) boolean error, ModelMap model) {
		String methodName = "getTimeoutPage";
		//LogDetails logDetails = LogDetails.getInstance();
		StringBuilder sb = new StringBuilder();
		//sb.append("userName=").append(logDetails.getUserName()).append(OMNYPAYConstants.COMMA);
		//LOGGER.debug(className, methodName, sb.toString().concat(OMNYPAYConstants.LOG_ENTRY));
		//LOGGER.debug(className, methodName, sb.toString().concat(OMNYPAYConstants.LOG_EXIT));
		return "timeout";
	}

	/**
	 * Gets the sessionExpired page.
	 * @param error the error
	 * @param model the model
	 * @return the sessionExpired page
	 */
	@RequestMapping(value = "/sessionTimeOut", method = RequestMethod.GET)
	public String getSessionTimeoutPage(@RequestParam(value = "error", required = false) boolean error, ModelMap model) {
		String methodName = "getSessionTimeoutPage";
		StringBuilder sb = new StringBuilder();
		sb.append("userName=").append("Not Logged In").append(",");
		//LOGGER.debug(className, methodName, sb.toString().concat(OMNYPAYConstants.LOG_ENTRY));
		//LOGGER.debug(className, methodName, sb.toString().concat(OMNYPAYConstants.LOG_EXIT));
		return "sessionExpired";
	}

}